{"version":3,"file":"static/js/602.519f9e5b.chunk.js","mappings":"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","sources":["components/TextNotes.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { Editor, EditorState, RichUtils, convertToRaw, convertFromRaw, getDefaultKeyBinding, KeyBindingUtil } from 'draft-js';\r\nimport { stateToHTML } from 'draft-js-export-html';\r\nimport { stateFromHTML } from 'draft-js-import-html';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport remarkGfm from 'remark-gfm';\r\nimport 'draft-js/dist/Draft.css';\r\n\r\nconst TextNotes = () => {\r\n  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\r\n  const [notes, setNotes] = useState([]);\r\n  const [currentNote, setCurrentNote] = useState(null);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [tags, setTags] = useState([]);\r\n  const [selectedTags, setSelectedTags] = useState([]);\r\n  const [newTag, setNewTag] = useState('');\r\n  const [noteTitle, setNoteTitle] = useState('');\r\n  const [viewMode, setViewMode] = useState('editor'); // 'editor', 'preview', 'split'\r\n  const [autoSaveStatus, setAutoSaveStatus] = useState('saved');\r\n  const [isMarkdownMode, setIsMarkdownMode] = useState(false);\r\n  const [markdownContent, setMarkdownContent] = useState('');\r\n  const [folders, setFolders] = useState(['General', 'Research', 'Ideas', 'Tasks']);\r\n  const [selectedFolder, setSelectedFolder] = useState('General');\r\n  const [newFolder, setNewFolder] = useState('');\r\n  const [showNotesList, setShowNotesList] = useState(true);\r\n\r\n  // Load notes from localStorage on component mount\r\n  useEffect(() => {\r\n    const savedNotes = localStorage.getItem('textNotes');\r\n    const savedTags = localStorage.getItem('noteTags');\r\n    const savedFolders = localStorage.getItem('noteFolders');\r\n    \r\n    if (savedNotes) {\r\n      try {\r\n        setNotes(JSON.parse(savedNotes));\r\n      } catch (error) {\r\n        console.error('Error loading notes:', error);\r\n      }\r\n    }\r\n    \r\n    if (savedTags) {\r\n      try {\r\n        setTags(JSON.parse(savedTags));\r\n      } catch (error) {\r\n        console.error('Error loading tags:', error);\r\n      }\r\n    }\r\n    \r\n    if (savedFolders) {\r\n      try {\r\n        setFolders(JSON.parse(savedFolders));\r\n      } catch (error) {\r\n        console.error('Error loading folders:', error);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Auto-save functionality\r\n  useEffect(() => {\r\n    if (currentNote && noteTitle.trim()) {\r\n      setAutoSaveStatus('saving');\r\n      const timer = setTimeout(() => {\r\n        saveCurrentNote();\r\n        setAutoSaveStatus('saved');\r\n      }, 2000);\r\n      \r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [editorState, noteTitle, selectedTags, selectedFolder, markdownContent]);\r\n\r\n  // Character and word count\r\n  const { characterCount, wordCount } = useMemo(() => {\r\n    const contentState = editorState.getCurrentContent();\r\n    const text = contentState.getPlainText('');\r\n    return {\r\n      characterCount: text.length,\r\n      wordCount: text.trim() ? text.trim().split(/\\s+/).length : 0\r\n    };\r\n  }, [editorState]);\r\n\r\n  const saveCurrentNote = useCallback(() => {\r\n    if (!noteTitle.trim()) return;\r\n\r\n    const contentState = editorState.getCurrentContent();\r\n    const rawContent = convertToRaw(contentState);\r\n    const htmlContent = stateToHTML(contentState);\r\n    \r\n    const noteData = {\r\n      id: currentNote?.id || Date.now(),\r\n      title: noteTitle,\r\n      content: rawContent,\r\n      htmlContent,\r\n      markdownContent: isMarkdownMode ? markdownContent : '',\r\n      tags: selectedTags,\r\n      folder: selectedFolder,\r\n      createdAt: currentNote?.createdAt || new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n      characterCount,\r\n      wordCount\r\n    };\r\n\r\n    const updatedNotes = currentNote \r\n      ? notes.map(note => note.id === currentNote.id ? noteData : note)\r\n      : [...notes, noteData];\r\n\r\n    setNotes(updatedNotes);\r\n    setCurrentNote(noteData);\r\n    localStorage.setItem('textNotes', JSON.stringify(updatedNotes));\r\n  }, [editorState, noteTitle, selectedTags, selectedFolder, markdownContent, isMarkdownMode, characterCount, wordCount, currentNote, notes]);\r\n\r\n  const createNewNote = () => {\r\n    if (currentNote && noteTitle.trim()) {\r\n      saveCurrentNote();\r\n    }\r\n    setCurrentNote(null);\r\n    setEditorState(EditorState.createEmpty());\r\n    setNoteTitle('');\r\n    setSelectedTags([]);\r\n    setMarkdownContent('');\r\n    setIsMarkdownMode(false);\r\n    setSelectedFolder('General');\r\n  };\r\n\r\n  const loadNote = (note) => {\r\n    if (currentNote && noteTitle.trim()) {\r\n      saveCurrentNote();\r\n    }\r\n    \r\n    setCurrentNote(note);\r\n    setNoteTitle(note.title);\r\n    setSelectedTags(note.tags || []);\r\n    setSelectedFolder(note.folder || 'General');\r\n    setIsMarkdownMode(!!note.markdownContent);\r\n    setMarkdownContent(note.markdownContent || '');\r\n    \r\n    if (note.content) {\r\n      try {\r\n        const contentState = convertFromRaw(note.content);\r\n        setEditorState(EditorState.createWithContent(contentState));\r\n      } catch (error) {\r\n        console.error('Error loading note content:', error);\r\n        setEditorState(EditorState.createEmpty());\r\n      }\r\n    }\r\n  };\r\n\r\n  const deleteNote = (noteId) => {\r\n    if (window.confirm('Are you sure you want to delete this note?')) {\r\n      const updatedNotes = notes.filter(note => note.id !== noteId);\r\n      setNotes(updatedNotes);\r\n      localStorage.setItem('textNotes', JSON.stringify(updatedNotes));\r\n      \r\n      if (currentNote?.id === noteId) {\r\n        createNewNote();\r\n      }\r\n    }\r\n  };\r\n\r\n  const addTag = () => {\r\n    if (newTag.trim() && !tags.includes(newTag.trim())) {\r\n      const updatedTags = [...tags, newTag.trim()];\r\n      setTags(updatedTags);\r\n      localStorage.setItem('noteTags', JSON.stringify(updatedTags));\r\n      setNewTag('');\r\n    }\r\n  };\r\n\r\n  const addFolder = () => {\r\n    if (newFolder.trim() && !folders.includes(newFolder.trim())) {\r\n      const updatedFolders = [...folders, newFolder.trim()];\r\n      setFolders(updatedFolders);\r\n      localStorage.setItem('noteFolders', JSON.stringify(updatedFolders));\r\n      setNewFolder('');\r\n    }\r\n  };\r\n\r\n  const toggleTag = (tag) => {\r\n    setSelectedTags(prev => \r\n      prev.includes(tag) \r\n        ? prev.filter(t => t !== tag)\r\n        : [...prev, tag]\r\n    );\r\n  };\r\n\r\n  const handleKeyCommand = (command, editorState) => {\r\n    const newState = RichUtils.handleKeyCommand(editorState, command);\r\n    if (newState) {\r\n      setEditorState(newState);\r\n      return 'handled';\r\n    }\r\n    return 'not-handled';\r\n  };\r\n\r\n  const onBoldClick = () => {\r\n    setEditorState(RichUtils.toggleInlineStyle(editorState, 'BOLD'));\r\n  };\r\n\r\n  const onItalicClick = () => {\r\n    setEditorState(RichUtils.toggleInlineStyle(editorState, 'ITALIC'));\r\n  };\r\n\r\n  const onUnderlineClick = () => {\r\n    setEditorState(RichUtils.toggleInlineStyle(editorState, 'UNDERLINE'));\r\n  };\r\n\r\n  const onBulletListClick = () => {\r\n    setEditorState(RichUtils.toggleBlockType(editorState, 'unordered-list-item'));\r\n  };\r\n\r\n  const onNumberedListClick = () => {\r\n    setEditorState(RichUtils.toggleBlockType(editorState, 'ordered-list-item'));\r\n  };\r\n\r\n  const onHeaderClick = () => {\r\n    setEditorState(RichUtils.toggleBlockType(editorState, 'header-two'));\r\n  };\r\n\r\n  const exportToMarkdown = () => {\r\n    const content = editorState.getCurrentContent().getPlainText('');\r\n    const blob = new Blob([content], { type: 'text/markdown' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `${noteTitle || 'note'}.md`;\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  const exportToPDF = () => {\r\n    const contentState = editorState.getCurrentContent();\r\n    const htmlContent = stateToHTML(contentState);\r\n    \r\n    const printWindow = window.open('', '_blank');\r\n    printWindow.document.write(`\r\n      <html>\r\n        <head>\r\n          <title>${noteTitle || 'Note'}</title>\r\n          <style>\r\n            body { font-family: Arial, sans-serif; margin: 40px; }\r\n            h1, h2, h3 { color: #333; }\r\n            .meta { color: #666; font-size: 12px; margin-bottom: 20px; }\r\n          </style>\r\n        </head>\r\n        <body>\r\n          <h1>${noteTitle || 'Untitled Note'}</h1>\r\n          <div class=\"meta\">\r\n            Created: ${new Date(currentNote?.createdAt || Date.now()).toLocaleDateString()}<br>\r\n            Tags: ${selectedTags.join(', ')}<br>\r\n            Folder: ${selectedFolder}<br>\r\n            Words: ${wordCount} | Characters: ${characterCount}\r\n          </div>\r\n          ${htmlContent}\r\n        </body>\r\n      </html>\r\n    `);\r\n    printWindow.document.close();\r\n    printWindow.print();\r\n  };\r\n\r\n  const filteredNotes = notes.filter(note => {\r\n    const matchesSearch = note.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n                         note.htmlContent.toLowerCase().includes(searchQuery.toLowerCase());\r\n    const matchesTags = selectedTags.length === 0 || selectedTags.every(tag => note.tags?.includes(tag));\r\n    return matchesSearch && matchesTags;\r\n  });\r\n\r\n  const toggleMarkdownMode = () => {\r\n    if (isMarkdownMode) {\r\n      // Convert markdown to rich text\r\n      const htmlContent = markdownContent; // You might want to convert markdown to HTML here\r\n      const contentState = stateFromHTML(htmlContent);\r\n      setEditorState(EditorState.createWithContent(contentState));\r\n    } else {\r\n      // Convert rich text to markdown\r\n      const content = editorState.getCurrentContent().getPlainText('');\r\n      setMarkdownContent(content);\r\n    }\r\n    setIsMarkdownMode(!isMarkdownMode);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-4 h-screen flex\">\r\n      {/* Sidebar */}\r\n      <div className={`${showNotesList ? 'w-1/3' : 'w-0'} transition-all duration-300 overflow-hidden bg-white border-r border-gray-200 flex flex-col`}>\r\n        <div className=\"p-4 border-b border-gray-200\">\r\n          <div className=\"flex justify-between items-center mb-4\">\r\n            <h2 className=\"text-xl font-bold\">📝 Text Notes</h2>\r\n            <button\r\n              onClick={() => setShowNotesList(!showNotesList)}\r\n              className=\"p-2 text-gray-500 hover:text-gray-700\"\r\n            >\r\n              {showNotesList ? '⬅️' : '➡️'}\r\n            </button>\r\n          </div>\r\n          \r\n          <button\r\n            onClick={createNewNote}\r\n            className=\"w-full bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition-colors mb-4\"\r\n          >\r\n            ✨ New Note\r\n          </button>\r\n\r\n          {/* Search */}\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"🔍 Search notes...\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n            className=\"w-full p-2 border border-gray-300 rounded-lg mb-4\"\r\n          />\r\n\r\n          {/* Tag Filter */}\r\n          <div className=\"mb-4\">\r\n            <label className=\"block text-sm font-medium mb-2\">Filter by Tags:</label>\r\n            <div className=\"flex flex-wrap gap-1\">\r\n              {tags.map(tag => (\r\n                <button\r\n                  key={tag}\r\n                  onClick={() => toggleTag(tag)}\r\n                  className={`px-2 py-1 text-xs rounded ${\r\n                    selectedTags.includes(tag)\r\n                      ? 'bg-blue-500 text-white'\r\n                      : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\r\n                  }`}\r\n                >\r\n                  {tag}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Notes List */}\r\n        <div className=\"flex-1 overflow-y-auto p-4\">\r\n          {filteredNotes.map(note => (\r\n            <div\r\n              key={note.id}\r\n              className={`p-3 mb-2 border rounded-lg cursor-pointer transition-colors ${\r\n                currentNote?.id === note.id\r\n                  ? 'bg-blue-50 border-blue-300'\r\n                  : 'bg-gray-50 border-gray-200 hover:bg-gray-100'\r\n              }`}\r\n              onClick={() => loadNote(note)}\r\n            >\r\n              <div className=\"flex justify-between items-start\">\r\n                <div className=\"flex-1\">\r\n                  <h3 className=\"font-medium truncate\">{note.title}</h3>\r\n                  <p className=\"text-xs text-gray-500\">\r\n                    {note.folder} • {new Date(note.updatedAt).toLocaleDateString()}\r\n                  </p>\r\n                  <div className=\"flex flex-wrap gap-1 mt-1\">\r\n                    {note.tags?.map(tag => (\r\n                      <span key={tag} className=\"px-1 py-0.5 text-xs bg-gray-200 rounded\">\r\n                        {tag}\r\n                      </span>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n                <button\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    deleteNote(note.id);\r\n                  }}\r\n                  className=\"text-red-500 hover:text-red-700 ml-2\"\r\n                >\r\n                  🗑️\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main Editor */}\r\n      <div className=\"flex-1 flex flex-col bg-white\">\r\n        {/* Header */}\r\n        <div className=\"p-4 border-b border-gray-200\">\r\n          <div className=\"flex justify-between items-center mb-4\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Note title...\"\r\n              value={noteTitle}\r\n              onChange={(e) => setNoteTitle(e.target.value)}\r\n              className=\"text-xl font-bold bg-transparent border-none focus:outline-none flex-1\"\r\n            />\r\n            <div className=\"flex items-center gap-2 text-sm text-gray-500\">\r\n              <span className={`px-2 py-1 rounded ${\r\n                autoSaveStatus === 'saved' ? 'bg-green-100 text-green-700' : 'bg-yellow-100 text-yellow-700'\r\n              }`}>\r\n                {autoSaveStatus === 'saved' ? '✅ Saved' : '💾 Saving...'}\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Toolbar */}\r\n          <div className=\"flex flex-wrap items-center gap-2 mb-4\">\r\n            <button onClick={onBoldClick} className=\"p-2 border rounded hover:bg-gray-100\" title=\"Bold\">\r\n              <strong>B</strong>\r\n            </button>\r\n            <button onClick={onItalicClick} className=\"p-2 border rounded hover:bg-gray-100\" title=\"Italic\">\r\n              <em>I</em>\r\n            </button>\r\n            <button onClick={onUnderlineClick} className=\"p-2 border rounded hover:bg-gray-100\" title=\"Underline\">\r\n              <u>U</u>\r\n            </button>\r\n            <button onClick={onHeaderClick} className=\"p-2 border rounded hover:bg-gray-100\" title=\"Header\">\r\n              H\r\n            </button>\r\n            <button onClick={onBulletListClick} className=\"p-2 border rounded hover:bg-gray-100\" title=\"Bullet List\">\r\n              •\r\n            </button>\r\n            <button onClick={onNumberedListClick} className=\"p-2 border rounded hover:bg-gray-100\" title=\"Numbered List\">\r\n              1.\r\n            </button>\r\n            \r\n            <div className=\"border-l border-gray-300 h-6 mx-2\"></div>\r\n            \r\n            <button\r\n              onClick={toggleMarkdownMode}\r\n              className={`p-2 border rounded hover:bg-gray-100 ${isMarkdownMode ? 'bg-blue-100' : ''}`}\r\n              title=\"Toggle Markdown Mode\"\r\n            >\r\n              MD\r\n            </button>\r\n\r\n            <div className=\"border-l border-gray-300 h-6 mx-2\"></div>\r\n\r\n            <button onClick={exportToMarkdown} className=\"p-2 border rounded hover:bg-gray-100\" title=\"Export as Markdown\">\r\n              📄\r\n            </button>\r\n            <button onClick={exportToPDF} className=\"p-2 border rounded hover:bg-gray-100\" title=\"Print/Export as PDF\">\r\n              🖨️\r\n            </button>\r\n          </div>\r\n\r\n          {/* Meta Information */}\r\n          <div className=\"flex flex-wrap items-center gap-4 text-sm\">\r\n            {/* Folder Selection */}\r\n            <div className=\"flex items-center gap-2\">\r\n              <label>📁 Folder:</label>\r\n              <select\r\n                value={selectedFolder}\r\n                onChange={(e) => setSelectedFolder(e.target.value)}\r\n                className=\"border border-gray-300 rounded px-2 py-1\"\r\n              >\r\n                {folders.map(folder => (\r\n                  <option key={folder} value={folder}>{folder}</option>\r\n                ))}\r\n              </select>\r\n              <div className=\"flex items-center gap-1\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"New folder\"\r\n                  value={newFolder}\r\n                  onChange={(e) => setNewFolder(e.target.value)}\r\n                  className=\"border border-gray-300 rounded px-2 py-1 text-sm w-24\"\r\n                />\r\n                <button onClick={addFolder} className=\"px-2 py-1 bg-gray-200 rounded text-sm\">+</button>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Tags */}\r\n            <div className=\"flex items-center gap-2\">\r\n              <label>🏷️ Tags:</label>\r\n              <div className=\"flex flex-wrap gap-1\">\r\n                {selectedTags.map(tag => (\r\n                  <span\r\n                    key={tag}\r\n                    className=\"px-2 py-1 bg-blue-100 text-blue-700 rounded text-xs cursor-pointer\"\r\n                    onClick={() => toggleTag(tag)}\r\n                  >\r\n                    {tag} ×\r\n                  </span>\r\n                ))}\r\n              </div>\r\n              <select\r\n                value=\"\"\r\n                onChange={(e) => e.target.value && toggleTag(e.target.value)}\r\n                className=\"border border-gray-300 rounded px-2 py-1 text-sm\"\r\n              >\r\n                <option value=\"\">Add tag...</option>\r\n                {tags.filter(tag => !selectedTags.includes(tag)).map(tag => (\r\n                  <option key={tag} value={tag}>{tag}</option>\r\n                ))}\r\n              </select>\r\n              <div className=\"flex items-center gap-1\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"New tag\"\r\n                  value={newTag}\r\n                  onChange={(e) => setNewTag(e.target.value)}\r\n                  onKeyPress={(e) => e.key === 'Enter' && addTag()}\r\n                  className=\"border border-gray-300 rounded px-2 py-1 text-sm w-20\"\r\n                />\r\n                <button onClick={addTag} className=\"px-2 py-1 bg-gray-200 rounded text-sm\">+</button>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Word Count */}\r\n            <div className=\"text-gray-500\">\r\n              📊 {wordCount} words, {characterCount} characters\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Editor Content */}\r\n        <div className=\"flex-1 overflow-hidden\">\r\n          {isMarkdownMode ? (\r\n            <div className=\"h-full flex\">\r\n              <div className=\"w-1/2 p-4 border-r border-gray-200\">\r\n                <textarea\r\n                  value={markdownContent}\r\n                  onChange={(e) => setMarkdownContent(e.target.value)}\r\n                  placeholder=\"Write in Markdown...\"\r\n                  className=\"w-full h-full resize-none border-none focus:outline-none font-mono\"\r\n                />\r\n              </div>\r\n              <div className=\"w-1/2 p-4 overflow-y-auto\">\r\n                <ReactMarkdown remarkPlugins={[remarkGfm]} className=\"prose max-w-none\">\r\n                  {markdownContent}\r\n                </ReactMarkdown>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"h-full p-4 overflow-y-auto\">\r\n              <Editor\r\n                editorState={editorState}\r\n                onChange={setEditorState}\r\n                handleKeyCommand={handleKeyCommand}\r\n                placeholder=\"Start writing your note...\"\r\n                spellCheck={true}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextNotes; "],"names":["TextNotes","editorState","setEditorState","useState","EditorState","createEmpty","notes","setNotes","currentNote","setCurrentNote","searchQuery","setSearchQuery","tags","setTags","selectedTags","setSelectedTags","newTag","setNewTag","noteTitle","setNoteTitle","viewMode","setViewMode","autoSaveStatus","setAutoSaveStatus","isMarkdownMode","setIsMarkdownMode","markdownContent","setMarkdownContent","folders","setFolders","selectedFolder","setSelectedFolder","newFolder","setNewFolder","showNotesList","setShowNotesList","useEffect","savedNotes","localStorage","getItem","savedTags","savedFolders","JSON","parse","error","console","trim","timer","setTimeout","saveCurrentNote","clearTimeout","characterCount","wordCount","useMemo","text","getCurrentContent","getPlainText","length","split","useCallback","contentState","rawContent","convertToRaw","htmlContent","stateToHTML","noteData","id","Date","now","title","content","folder","createdAt","toISOString","updatedAt","updatedNotes","map","note","setItem","stringify","createNewNote","addTag","includes","updatedTags","toggleTag","tag","prev","filter","t","filteredNotes","matchesSearch","toLowerCase","matchesTags","every","_note$tags","_jsxs","className","children","_jsx","onClick","type","placeholder","value","onChange","e","target","_note$tags2","convertFromRaw","createWithContent","loadNote","toLocaleDateString","stopPropagation","noteId","window","confirm","deleteNote","onBoldClick","RichUtils","toggleInlineStyle","onItalicClick","onUnderlineClick","onHeaderClick","toggleBlockType","onBulletListClick","onNumberedListClick","toggleMarkdownMode","stateFromHTML","exportToMarkdown","blob","Blob","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","exportToPDF","printWindow","open","write","join","close","print","addFolder","updatedFolders","onKeyPress","key","ReactMarkdown","remarkPlugins","remarkGfm","Editor","handleKeyCommand","command","newState","spellCheck"],"sourceRoot":""}