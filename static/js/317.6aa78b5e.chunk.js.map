{"version":3,"file":"static/js/317.6aa78b5e.chunk.js","mappings":"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","sources":["services/gitHubFileService.js","components/GitHubFileManager.js"],"sourcesContent":["import authService from './authService.js';\r\n\r\nclass GitHubFileService {\r\n  constructor() {\r\n    this.cache = new Map();\r\n    this.cacheExpiry = new Map();\r\n    this.rateLimitRemaining = 5000; // GitHub API rate limit\r\n    this.rateLimitReset = Date.now();\r\n    this.requestQueue = [];\r\n    this.isProcessingQueue = false;\r\n    this.maxCacheSize = 100;\r\n    this.cacheExpiryTime = 5 * 60 * 1000; // 5 minutes\r\n    \r\n    // Configuration for default repository structure\r\n    this.defaultStructure = {\r\n      documents: 'documents',\r\n      tasks: 'tasks',\r\n      projects: 'projects',\r\n      templates: 'templates',\r\n      uploads: 'uploads'\r\n    };\r\n  }\r\n\r\n  // Get authenticated Octokit instance from authService\r\n  async getOctokit() {\r\n    const octokit = authService.getOctokit();\r\n    if (!octokit) {\r\n      throw new Error('Not authenticated. Please login first.');\r\n    }\r\n    return octokit;\r\n  }\r\n\r\n  // Rate limiting and throttling\r\n  async handleRateLimit() {\r\n    const now = Date.now();\r\n    \r\n    // Check if we need to wait for rate limit reset\r\n    if (this.rateLimitRemaining <= 10 && now < this.rateLimitReset) {\r\n      const waitTime = this.rateLimitReset - now;\r\n      console.warn(`Rate limit approaching. Waiting ${waitTime}ms`);\r\n      await new Promise(resolve => setTimeout(resolve, waitTime));\r\n    }\r\n  }\r\n\r\n  // Update rate limit info from response headers\r\n  updateRateLimit(headers) {\r\n    if (headers['x-ratelimit-remaining']) {\r\n      this.rateLimitRemaining = parseInt(headers['x-ratelimit-remaining']);\r\n    }\r\n    if (headers['x-ratelimit-reset']) {\r\n      this.rateLimitReset = parseInt(headers['x-ratelimit-reset']) * 1000;\r\n    }\r\n  }\r\n\r\n  // Cache management\r\n  getCachedData(key) {\r\n    const now = Date.now();\r\n    const expiry = this.cacheExpiry.get(key);\r\n    \r\n    if (expiry && now > expiry) {\r\n      this.cache.delete(key);\r\n      this.cacheExpiry.delete(key);\r\n      return null;\r\n    }\r\n    \r\n    return this.cache.get(key);\r\n  }\r\n\r\n  setCachedData(key, data) {\r\n    // Implement LRU cache eviction\r\n    if (this.cache.size >= this.maxCacheSize) {\r\n      const firstKey = this.cache.keys().next().value;\r\n      this.cache.delete(firstKey);\r\n      this.cacheExpiry.delete(firstKey);\r\n    }\r\n    \r\n    this.cache.set(key, data);\r\n    this.cacheExpiry.set(key, Date.now() + this.cacheExpiryTime);\r\n  }\r\n\r\n  // Clear cache\r\n  clearCache() {\r\n    this.cache.clear();\r\n    this.cacheExpiry.clear();\r\n  }\r\n\r\n  // Create folder structure in repository\r\n  async createFolderStructure(owner, repo, basePath = '') {\r\n    try {\r\n      await this.handleRateLimit();\r\n      const octokit = await this.getOctokit();\r\n\r\n      const folders = Object.values(this.defaultStructure);\r\n      const createdFolders = [];\r\n\r\n      for (const folder of folders) {\r\n        const folderPath = basePath ? `${basePath}/${folder}` : folder;\r\n        const readmePath = `${folderPath}/README.md`;\r\n        \r\n        try {\r\n          // Check if folder already exists by trying to get README\r\n          await octokit.rest.repos.getContent({\r\n            owner,\r\n            repo,\r\n            path: readmePath\r\n          });\r\n        } catch (error) {\r\n          if (error.status === 404) {\r\n            // Folder doesn't exist, create it with a README\r\n            const readmeContent = `# ${folder.charAt(0).toUpperCase() + folder.slice(1)}\\n\\nThis folder contains ${folder} for the project.`;\r\n            \r\n            await octokit.rest.repos.createOrUpdateFileContents({\r\n              owner,\r\n              repo,\r\n              path: readmePath,\r\n              message: `Create ${folder} folder`,\r\n              content: Buffer.from(readmeContent).toString('base64')\r\n            });\r\n            \r\n            createdFolders.push(folderPath);\r\n          } else {\r\n            throw error;\r\n          }\r\n        }\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        createdFolders,\r\n        structure: this.defaultStructure\r\n      };\r\n    } catch (error) {\r\n      console.error('Failed to create folder structure:', error);\r\n      throw new Error(`Failed to create folder structure: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Upload file to GitHub repository\r\n  async uploadFile(owner, repo, path, content, message, branch = 'main') {\r\n    try {\r\n      await this.handleRateLimit();\r\n      const octokit = await this.getOctokit();\r\n\r\n      // Convert content to base64 if it's not already\r\n      let base64Content;\r\n      if (typeof content === 'string') {\r\n        base64Content = Buffer.from(content).toString('base64');\r\n      } else if (content instanceof ArrayBuffer) {\r\n        base64Content = Buffer.from(content).toString('base64');\r\n      } else if (content instanceof Blob) {\r\n        const arrayBuffer = await content.arrayBuffer();\r\n        base64Content = Buffer.from(arrayBuffer).toString('base64');\r\n      } else {\r\n        throw new Error('Unsupported content type');\r\n      }\r\n\r\n      // Check if file already exists to get SHA for updates\r\n      let sha = null;\r\n      try {\r\n        const existingFile = await octokit.rest.repos.getContent({\r\n          owner,\r\n          repo,\r\n          path,\r\n          ref: branch\r\n        });\r\n        \r\n        if (existingFile.data.sha) {\r\n          sha = existingFile.data.sha;\r\n        }\r\n      } catch (error) {\r\n        // File doesn't exist, which is fine for new uploads\r\n        if (error.status !== 404) {\r\n          throw error;\r\n        }\r\n      }\r\n\r\n      const requestData = {\r\n        owner,\r\n        repo,\r\n        path,\r\n        message: message || `Upload ${path}`,\r\n        content: base64Content,\r\n        branch\r\n      };\r\n\r\n      if (sha) {\r\n        requestData.sha = sha;\r\n      }\r\n\r\n      const response = await octokit.rest.repos.createOrUpdateFileContents(requestData);\r\n      \r\n      // Update rate limit info\r\n      this.updateRateLimit(response.headers);\r\n\r\n      // Clear cache for this file\r\n      const cacheKey = `${owner}/${repo}/${path}`;\r\n      this.cache.delete(cacheKey);\r\n      this.cacheExpiry.delete(cacheKey);\r\n\r\n      // Generate accessible link\r\n      const fileLink = this.generateFileLink(owner, repo, path, branch);\r\n\r\n      return {\r\n        success: true,\r\n        sha: response.data.content.sha,\r\n        url: response.data.content.html_url,\r\n        downloadUrl: response.data.content.download_url,\r\n        accessibleLink: fileLink,\r\n        commit: response.data.commit\r\n      };\r\n    } catch (error) {\r\n      console.error('File upload failed:', error);\r\n      throw new Error(`File upload failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Update existing file\r\n  async updateFile(owner, repo, path, content, message, branch = 'main') {\r\n    try {\r\n      await this.handleRateLimit();\r\n      const octokit = await this.getOctokit();\r\n\r\n      // Get current file to get SHA\r\n      const existingFile = await octokit.rest.repos.getContent({\r\n        owner,\r\n        repo,\r\n        path,\r\n        ref: branch\r\n      });\r\n\r\n      if (!existingFile.data.sha) {\r\n        throw new Error('File not found or unable to get file SHA');\r\n      }\r\n\r\n      // Convert content to base64\r\n      let base64Content;\r\n      if (typeof content === 'string') {\r\n        base64Content = Buffer.from(content).toString('base64');\r\n      } else if (content instanceof ArrayBuffer) {\r\n        base64Content = Buffer.from(content).toString('base64');\r\n      } else if (content instanceof Blob) {\r\n        const arrayBuffer = await content.arrayBuffer();\r\n        base64Content = Buffer.from(arrayBuffer).toString('base64');\r\n      } else {\r\n        throw new Error('Unsupported content type');\r\n      }\r\n\r\n      const response = await octokit.rest.repos.createOrUpdateFileContents({\r\n        owner,\r\n        repo,\r\n        path,\r\n        message: message || `Update ${path}`,\r\n        content: base64Content,\r\n        sha: existingFile.data.sha,\r\n        branch\r\n      });\r\n\r\n      // Update rate limit info\r\n      this.updateRateLimit(response.headers);\r\n\r\n      // Clear cache for this file\r\n      const cacheKey = `${owner}/${repo}/${path}`;\r\n      this.cache.delete(cacheKey);\r\n      this.cacheExpiry.delete(cacheKey);\r\n\r\n      return {\r\n        success: true,\r\n        sha: response.data.content.sha,\r\n        url: response.data.content.html_url,\r\n        downloadUrl: response.data.content.download_url,\r\n        commit: response.data.commit\r\n      };\r\n    } catch (error) {\r\n      console.error('File update failed:', error);\r\n      throw new Error(`File update failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Delete file from repository\r\n  async deleteFile(owner, repo, path, message, branch = 'main') {\r\n    try {\r\n      await this.handleRateLimit();\r\n      const octokit = await this.getOctokit();\r\n\r\n      // Get current file to get SHA\r\n      const existingFile = await octokit.rest.repos.getContent({\r\n        owner,\r\n        repo,\r\n        path,\r\n        ref: branch\r\n      });\r\n\r\n      if (!existingFile.data.sha) {\r\n        throw new Error('File not found or unable to get file SHA');\r\n      }\r\n\r\n      const response = await octokit.rest.repos.deleteFile({\r\n        owner,\r\n        repo,\r\n        path,\r\n        message: message || `Delete ${path}`,\r\n        sha: existingFile.data.sha,\r\n        branch\r\n      });\r\n\r\n      // Update rate limit info\r\n      this.updateRateLimit(response.headers);\r\n\r\n      // Clear cache for this file\r\n      const cacheKey = `${owner}/${repo}/${path}`;\r\n      this.cache.delete(cacheKey);\r\n      this.cacheExpiry.delete(cacheKey);\r\n\r\n      return {\r\n        success: true,\r\n        commit: response.data.commit\r\n      };\r\n    } catch (error) {\r\n      console.error('File deletion failed:', error);\r\n      throw new Error(`File deletion failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Get file content with caching\r\n  async getFileContent(owner, repo, path, branch = 'main') {\r\n    try {\r\n      const cacheKey = `${owner}/${repo}/${path}`;\r\n      const cachedData = this.getCachedData(cacheKey);\r\n      \r\n      if (cachedData) {\r\n        return cachedData;\r\n      }\r\n\r\n      await this.handleRateLimit();\r\n      const octokit = await this.getOctokit();\r\n\r\n      const response = await octokit.rest.repos.getContent({\r\n        owner,\r\n        repo,\r\n        path,\r\n        ref: branch\r\n      });\r\n\r\n      // Update rate limit info\r\n      this.updateRateLimit(response.headers);\r\n\r\n      const fileData = {\r\n        content: Buffer.from(response.data.content, 'base64').toString(),\r\n        sha: response.data.sha,\r\n        size: response.data.size,\r\n        url: response.data.html_url,\r\n        downloadUrl: response.data.download_url,\r\n        type: response.data.type,\r\n        encoding: response.data.encoding\r\n      };\r\n\r\n      // Cache the result\r\n      this.setCachedData(cacheKey, fileData);\r\n\r\n      return fileData;\r\n    } catch (error) {\r\n      console.error('Failed to get file content:', error);\r\n      throw new Error(`Failed to get file content: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // List files in a directory\r\n  async listFiles(owner, repo, path = '', branch = 'main') {\r\n    try {\r\n      const cacheKey = `${owner}/${repo}/list/${path}`;\r\n      const cachedData = this.getCachedData(cacheKey);\r\n      \r\n      if (cachedData) {\r\n        return cachedData;\r\n      }\r\n\r\n      await this.handleRateLimit();\r\n      const octokit = await this.getOctokit();\r\n\r\n      const response = await octokit.rest.repos.getContent({\r\n        owner,\r\n        repo,\r\n        path,\r\n        ref: branch\r\n      });\r\n\r\n      // Update rate limit info\r\n      this.updateRateLimit(response.headers);\r\n\r\n      const files = Array.isArray(response.data) \r\n        ? response.data.map(item => ({\r\n            name: item.name,\r\n            path: item.path,\r\n            type: item.type,\r\n            size: item.size,\r\n            sha: item.sha,\r\n            url: item.html_url,\r\n            downloadUrl: item.download_url\r\n          }))\r\n        : [{\r\n            name: response.data.name,\r\n            path: response.data.path,\r\n            type: response.data.type,\r\n            size: response.data.size,\r\n            sha: response.data.sha,\r\n            url: response.data.html_url,\r\n            downloadUrl: response.data.download_url\r\n          }];\r\n\r\n      // Cache the result\r\n      this.setCachedData(cacheKey, files);\r\n\r\n      return files;\r\n    } catch (error) {\r\n      console.error('Failed to list files:', error);\r\n      throw new Error(`Failed to list files: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Generate accessible file links\r\n  generateFileLink(owner, repo, path, branch = 'main') {\r\n    return {\r\n      raw: `https://raw.githubusercontent.com/${owner}/${repo}/${branch}/${path}`,\r\n      blob: `https://github.com/${owner}/${repo}/blob/${branch}/${path}`,\r\n      download: `https://github.com/${owner}/${repo}/raw/${branch}/${path}`\r\n    };\r\n  }\r\n\r\n  // Conflict resolution for simultaneous edits\r\n  async resolveConflict(owner, repo, path, localContent, message, branch = 'main') {\r\n    try {\r\n      await this.handleRateLimit();\r\n      const octokit = await this.getOctokit();\r\n\r\n      // Get the latest version from the repository\r\n      const latestFile = await octokit.rest.repos.getContent({\r\n        owner,\r\n        repo,\r\n        path,\r\n        ref: branch\r\n      });\r\n\r\n      const latestContent = Buffer.from(latestFile.data.content, 'base64').toString();\r\n\r\n      // Simple conflict resolution strategy: create a backup of the current version\r\n      // and then update with new content\r\n      const timestamp = new Date().toISOString().replace(/:/g, '-');\r\n      const backupPath = `${path}.backup.${timestamp}`;\r\n\r\n      // Create backup of the latest version\r\n      await this.uploadFile(\r\n        owner,\r\n        repo,\r\n        backupPath,\r\n        latestContent,\r\n        `Backup before conflict resolution for ${path}`,\r\n        branch\r\n      );\r\n\r\n      // Update with new content\r\n      const updateResult = await this.updateFile(\r\n        owner,\r\n        repo,\r\n        path,\r\n        localContent,\r\n        message || `Resolve conflict in ${path}`,\r\n        branch\r\n      );\r\n\r\n      return {\r\n        success: true,\r\n        resolution: 'backup_and_update',\r\n        backupPath,\r\n        updateResult,\r\n        conflictInfo: {\r\n          latestSha: latestFile.data.sha,\r\n          backupCreated: true\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('Conflict resolution failed:', error);\r\n      throw new Error(`Conflict resolution failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Batch operations with queue processing\r\n  async processBatchOperations(operations) {\r\n    const results = [];\r\n    \r\n    for (const operation of operations) {\r\n      try {\r\n        let result;\r\n        \r\n        switch (operation.type) {\r\n          case 'upload':\r\n            result = await this.uploadFile(\r\n              operation.owner,\r\n              operation.repo,\r\n              operation.path,\r\n              operation.content,\r\n              operation.message,\r\n              operation.branch\r\n            );\r\n            break;\r\n          case 'update':\r\n            result = await this.updateFile(\r\n              operation.owner,\r\n              operation.repo,\r\n              operation.path,\r\n              operation.content,\r\n              operation.message,\r\n              operation.branch\r\n            );\r\n            break;\r\n          case 'delete':\r\n            result = await this.deleteFile(\r\n              operation.owner,\r\n              operation.repo,\r\n              operation.path,\r\n              operation.message,\r\n              operation.branch\r\n            );\r\n            break;\r\n          default:\r\n            throw new Error(`Unknown operation type: ${operation.type}`);\r\n        }\r\n        \r\n        results.push({\r\n          operation,\r\n          result,\r\n          success: true\r\n        });\r\n      } catch (error) {\r\n        results.push({\r\n          operation,\r\n          error: error.message,\r\n          success: false\r\n        });\r\n      }\r\n    }\r\n    \r\n    return results;\r\n  }\r\n\r\n  // Get repository information\r\n  async getRepositoryInfo(owner, repo) {\r\n    try {\r\n      await this.handleRateLimit();\r\n      const octokit = await this.getOctokit();\r\n\r\n      const response = await octokit.rest.repos.get({\r\n        owner,\r\n        repo\r\n      });\r\n\r\n      // Update rate limit info\r\n      this.updateRateLimit(response.headers);\r\n\r\n      return {\r\n        name: response.data.name,\r\n        fullName: response.data.full_name,\r\n        description: response.data.description,\r\n        private: response.data.private,\r\n        defaultBranch: response.data.default_branch,\r\n        permissions: response.data.permissions,\r\n        size: response.data.size,\r\n        language: response.data.language,\r\n        createdAt: response.data.created_at,\r\n        updatedAt: response.data.updated_at\r\n      };\r\n    } catch (error) {\r\n      console.error('Failed to get repository info:', error);\r\n      throw new Error(`Failed to get repository info: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Get rate limit status\r\n  getRateLimitStatus() {\r\n    return {\r\n      remaining: this.rateLimitRemaining,\r\n      reset: new Date(this.rateLimitReset),\r\n      resetIn: Math.max(0, this.rateLimitReset - Date.now())\r\n    };\r\n  }\r\n\r\n  // Get cache status\r\n  getCacheStatus() {\r\n    return {\r\n      size: this.cache.size,\r\n      maxSize: this.maxCacheSize,\r\n      keys: Array.from(this.cache.keys())\r\n    };\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst gitHubFileService = new GitHubFileService();\r\n\r\nexport default gitHubFileService; ","import React, { useState, useEffect, useRef } from 'react';\r\nimport gitHubFileService from '../services/gitHubFileService';\r\nimport authService from '../services/authService';\r\nimport LoadingSpinner from './LoadingSpinner';\r\n\r\nconst GitHubFileManager = () => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [repositories, setRepositories] = useState([]);\r\n  const [selectedRepo, setSelectedRepo] = useState('');\r\n  const [currentPath, setCurrentPath] = useState('');\r\n  const [files, setFiles] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [fileContent, setFileContent] = useState('');\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [uploadFile, setUploadFile] = useState(null);\r\n  const [uploadPath, setUploadPath] = useState('');\r\n  const [commitMessage, setCommitMessage] = useState('');\r\n  const [rateLimitInfo, setRateLimitInfo] = useState(null);\r\n  const [cacheInfo, setCacheInfo] = useState(null);\r\n  const fileInputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    checkAuthentication();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      loadRepositories();\r\n      updateStatusInfo();\r\n    }\r\n  }, [isAuthenticated]);\r\n\r\n  useEffect(() => {\r\n    if (selectedRepo) {\r\n      loadFiles();\r\n    }\r\n  }, [selectedRepo, currentPath]);\r\n\r\n  const checkAuthentication = async () => {\r\n    try {\r\n      const authenticated = authService.isAuthenticated();\r\n      setIsAuthenticated(authenticated);\r\n      if (authenticated) {\r\n        await authService.validateToken();\r\n      }\r\n    } catch (error) {\r\n      console.error('Authentication check failed:', error);\r\n      setError('Authentication check failed');\r\n    }\r\n  };\r\n\r\n  const loadRepositories = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const repos = await authService.getRepositories();\r\n      setRepositories(repos);\r\n    } catch (error) {\r\n      setError(`Failed to load repositories: ${error.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadFiles = async () => {\r\n    if (!selectedRepo) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      const [owner, repo] = selectedRepo.split('/');\r\n      const fileList = await gitHubFileService.listFiles(owner, repo, currentPath);\r\n      setFiles(fileList);\r\n      setError('');\r\n    } catch (error) {\r\n      setError(`Failed to load files: ${error.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateStatusInfo = () => {\r\n    const rateLimit = gitHubFileService.getRateLimitStatus();\r\n    const cache = gitHubFileService.getCacheStatus();\r\n    setRateLimitInfo(rateLimit);\r\n    setCacheInfo(cache);\r\n  };\r\n\r\n  const handleRepoSelect = (repoFullName) => {\r\n    setSelectedRepo(repoFullName);\r\n    setCurrentPath('');\r\n    setSelectedFile(null);\r\n    setFileContent('');\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const navigateToFolder = (folderPath) => {\r\n    setCurrentPath(folderPath);\r\n    setSelectedFile(null);\r\n    setFileContent('');\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const navigateUp = () => {\r\n    const pathParts = currentPath.split('/').filter(part => part !== '');\r\n    pathParts.pop();\r\n    setCurrentPath(pathParts.join('/'));\r\n  };\r\n\r\n  const selectFile = async (file) => {\r\n    if (file.type === 'file') {\r\n      try {\r\n        setLoading(true);\r\n        const [owner, repo] = selectedRepo.split('/');\r\n        const content = await gitHubFileService.getFileContent(owner, repo, file.path);\r\n        setSelectedFile(file);\r\n        setFileContent(content.content);\r\n        setIsEditing(false);\r\n        updateStatusInfo();\r\n      } catch (error) {\r\n        setError(`Failed to load file content: ${error.message}`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    } else if (file.type === 'dir') {\r\n      navigateToFolder(file.path);\r\n    }\r\n  };\r\n\r\n  const handleFileUpload = async () => {\r\n    if (!uploadFile || !selectedRepo) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      const [owner, repo] = selectedRepo.split('/');\r\n      const filePath = uploadPath ? `${currentPath}/${uploadPath}` : `${currentPath}/${uploadFile.name}`;\r\n      \r\n      const result = await gitHubFileService.uploadFile(\r\n        owner,\r\n        repo,\r\n        filePath,\r\n        uploadFile,\r\n        commitMessage || `Upload ${uploadFile.name}`\r\n      );\r\n\r\n      setSuccess(`File uploaded successfully: ${result.url}`);\r\n      setUploadFile(null);\r\n      setUploadPath('');\r\n      setCommitMessage('');\r\n      if (fileInputRef.current) {\r\n        fileInputRef.current.value = '';\r\n      }\r\n      \r\n      // Reload files\r\n      await loadFiles();\r\n      updateStatusInfo();\r\n    } catch (error) {\r\n      setError(`File upload failed: ${error.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleFileUpdate = async () => {\r\n    if (!selectedFile || !selectedRepo) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      const [owner, repo] = selectedRepo.split('/');\r\n      \r\n      const result = await gitHubFileService.updateFile(\r\n        owner,\r\n        repo,\r\n        selectedFile.path,\r\n        fileContent,\r\n        commitMessage || `Update ${selectedFile.name}`\r\n      );\r\n\r\n      setSuccess(`File updated successfully: ${result.url}`);\r\n      setIsEditing(false);\r\n      setCommitMessage('');\r\n      updateStatusInfo();\r\n    } catch (error) {\r\n      setError(`File update failed: ${error.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleFileDelete = async (file) => {\r\n    if (!file || !selectedRepo) return;\r\n\r\n    const confirmDelete = window.confirm(`Are you sure you want to delete ${file.name}?`);\r\n    if (!confirmDelete) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      const [owner, repo] = selectedRepo.split('/');\r\n      \r\n      await gitHubFileService.deleteFile(\r\n        owner,\r\n        repo,\r\n        file.path,\r\n        `Delete ${file.name}`\r\n      );\r\n\r\n      setSuccess(`File deleted successfully: ${file.name}`);\r\n      \r\n      // Clear selected file if it was deleted\r\n      if (selectedFile && selectedFile.path === file.path) {\r\n        setSelectedFile(null);\r\n        setFileContent('');\r\n        setIsEditing(false);\r\n      }\r\n      \r\n      // Reload files\r\n      await loadFiles();\r\n      updateStatusInfo();\r\n    } catch (error) {\r\n      setError(`File deletion failed: ${error.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const createFolderStructure = async () => {\r\n    if (!selectedRepo) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      const [owner, repo] = selectedRepo.split('/');\r\n      \r\n      const result = await gitHubFileService.createFolderStructure(owner, repo);\r\n      \r\n      setSuccess(`Folder structure created: ${result.createdFolders.join(', ')}`);\r\n      await loadFiles();\r\n      updateStatusInfo();\r\n    } catch (error) {\r\n      setError(`Failed to create folder structure: ${error.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const clearCache = () => {\r\n    gitHubFileService.clearCache();\r\n    setSuccess('Cache cleared successfully');\r\n    updateStatusInfo();\r\n  };\r\n\r\n  const formatBytes = (bytes) => {\r\n    if (bytes === 0) return '0 Bytes';\r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  };\r\n\r\n  const formatDate = (dateString) => {\r\n    return new Date(dateString).toLocaleString();\r\n  };\r\n\r\n  if (!isAuthenticated) {\r\n    return (\r\n      <div className=\"max-w-4xl mx-auto p-6 bg-white rounded-lg shadow-lg\">\r\n        <div className=\"text-center\">\r\n          <h2 className=\"text-2xl font-bold text-gray-800 mb-4\">GitHub File Manager</h2>\r\n          <p className=\"text-gray-600 mb-4\">Please log in to access GitHub file management features.</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto p-6 bg-white rounded-lg shadow-lg\">\r\n      <div className=\"mb-6\">\r\n        <h2 className=\"text-2xl font-bold text-gray-800 mb-4\">GitHub File Manager</h2>\r\n        \r\n        {/* Status Information */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\r\n          {rateLimitInfo && (\r\n            <div className=\"bg-blue-50 p-3 rounded-lg\">\r\n              <h4 className=\"font-semibold text-blue-800\">Rate Limit Status</h4>\r\n              <p className=\"text-sm text-blue-600\">\r\n                Remaining: {rateLimitInfo.remaining} | \r\n                Reset: {formatDate(rateLimitInfo.reset)}\r\n              </p>\r\n            </div>\r\n          )}\r\n          {cacheInfo && (\r\n            <div className=\"bg-green-50 p-3 rounded-lg\">\r\n              <h4 className=\"font-semibold text-green-800\">Cache Status</h4>\r\n              <p className=\"text-sm text-green-600\">\r\n                Size: {cacheInfo.size}/{cacheInfo.maxSize}\r\n                <button \r\n                  onClick={clearCache}\r\n                  className=\"ml-2 text-xs bg-green-200 hover:bg-green-300 px-2 py-1 rounded\"\r\n                >\r\n                  Clear\r\n                </button>\r\n              </p>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Error/Success Messages */}\r\n        {error && (\r\n          <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n            <p className=\"text-red-700\">{error}</p>\r\n            <button \r\n              onClick={() => setError('')}\r\n              className=\"mt-2 text-sm text-red-600 hover:text-red-800\"\r\n            >\r\n              Dismiss\r\n            </button>\r\n          </div>\r\n        )}\r\n        \r\n        {success && (\r\n          <div className=\"mb-4 p-4 bg-green-50 border border-green-200 rounded-lg\">\r\n            <p className=\"text-green-700\">{success}</p>\r\n            <button \r\n              onClick={() => setSuccess('')}\r\n              className=\"mt-2 text-sm text-green-600 hover:text-green-800\"\r\n            >\r\n              Dismiss\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        {/* Repository Selection */}\r\n        <div className=\"mb-4\">\r\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n            Select Repository:\r\n          </label>\r\n          <select\r\n            value={selectedRepo}\r\n            onChange={(e) => handleRepoSelect(e.target.value)}\r\n            className=\"w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n          >\r\n            <option value=\"\">Choose a repository...</option>\r\n            {repositories.map((repo) => (\r\n              <option key={repo.id} value={repo.full_name}>\r\n                {repo.full_name} {repo.private ? '(Private)' : '(Public)'}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        {selectedRepo && (\r\n          <div className=\"mb-4\">\r\n            <button\r\n              onClick={createFolderStructure}\r\n              className=\"bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg transition-colors\"\r\n              disabled={loading}\r\n            >\r\n              Create Default Folder Structure\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {loading && (\r\n        <div className=\"flex justify-center mb-4\">\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n\r\n      {selectedRepo && (\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n          {/* File Browser */}\r\n          <div className=\"bg-gray-50 p-4 rounded-lg\">\r\n            <div className=\"flex items-center justify-between mb-4\">\r\n              <h3 className=\"text-lg font-semibold\">Files</h3>\r\n              <div className=\"flex space-x-2\">\r\n                {currentPath && (\r\n                  <button\r\n                    onClick={navigateUp}\r\n                    className=\"text-sm bg-gray-200 hover:bg-gray-300 px-3 py-1 rounded\"\r\n                  >\r\n                    ← Back\r\n                  </button>\r\n                )}\r\n                <button\r\n                  onClick={loadFiles}\r\n                  className=\"text-sm bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded\"\r\n                >\r\n                  Refresh\r\n                </button>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"text-sm text-gray-600 mb-2\">\r\n              Path: /{currentPath || 'root'}\r\n            </div>\r\n            \r\n            <div className=\"space-y-2 max-h-96 overflow-y-auto\">\r\n              {files.map((file) => (\r\n                <div\r\n                  key={file.path}\r\n                  className={`p-3 border rounded-lg cursor-pointer transition-colors ${\r\n                    selectedFile && selectedFile.path === file.path\r\n                      ? 'bg-blue-100 border-blue-300'\r\n                      : 'bg-white hover:bg-gray-100 border-gray-200'\r\n                  }`}\r\n                  onClick={() => selectFile(file)}\r\n                >\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div className=\"flex items-center\">\r\n                      <span className=\"mr-2\">\r\n                        {file.type === 'dir' ? '📁' : '📄'}\r\n                      </span>\r\n                      <div>\r\n                        <div className=\"font-medium\">{file.name}</div>\r\n                        {file.type === 'file' && (\r\n                          <div className=\"text-xs text-gray-500\">\r\n                            {formatBytes(file.size)}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    {file.type === 'file' && (\r\n                      <button\r\n                        onClick={(e) => {\r\n                          e.stopPropagation();\r\n                          handleFileDelete(file);\r\n                        }}\r\n                        className=\"text-red-600 hover:text-red-800 text-sm\"\r\n                      >\r\n                        Delete\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            {files.length === 0 && !loading && (\r\n              <div className=\"text-center text-gray-500 py-8\">\r\n                No files found in this directory\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* File Upload & Content Editor */}\r\n          <div className=\"space-y-6\">\r\n            {/* File Upload */}\r\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\r\n              <h3 className=\"text-lg font-semibold mb-4\">Upload File</h3>\r\n              <div className=\"space-y-3\">\r\n                <input\r\n                  ref={fileInputRef}\r\n                  type=\"file\"\r\n                  onChange={(e) => setUploadFile(e.target.files[0])}\r\n                  className=\"w-full p-2 border border-gray-300 rounded-lg\"\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Custom file path (optional)\"\r\n                  value={uploadPath}\r\n                  onChange={(e) => setUploadPath(e.target.value)}\r\n                  className=\"w-full p-2 border border-gray-300 rounded-lg\"\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Commit message (optional)\"\r\n                  value={commitMessage}\r\n                  onChange={(e) => setCommitMessage(e.target.value)}\r\n                  className=\"w-full p-2 border border-gray-300 rounded-lg\"\r\n                />\r\n                <button\r\n                  onClick={handleFileUpload}\r\n                  disabled={!uploadFile || loading}\r\n                  className=\"w-full bg-green-600 hover:bg-green-700 disabled:bg-gray-400 text-white px-4 py-2 rounded-lg transition-colors\"\r\n                >\r\n                  Upload File\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            {/* File Content Editor */}\r\n            {selectedFile && (\r\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\r\n                <div className=\"flex items-center justify-between mb-4\">\r\n                  <h3 className=\"text-lg font-semibold\">\r\n                    {selectedFile.name}\r\n                  </h3>\r\n                  <div className=\"flex space-x-2\">\r\n                    <button\r\n                      onClick={() => setIsEditing(!isEditing)}\r\n                      className=\"text-sm bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded\"\r\n                    >\r\n                      {isEditing ? 'View' : 'Edit'}\r\n                    </button>\r\n                    {isEditing && (\r\n                      <button\r\n                        onClick={handleFileUpdate}\r\n                        disabled={loading}\r\n                        className=\"text-sm bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded\"\r\n                      >\r\n                        Save\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                \r\n                {isEditing && (\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Commit message for update\"\r\n                    value={commitMessage}\r\n                    onChange={(e) => setCommitMessage(e.target.value)}\r\n                    className=\"w-full p-2 border border-gray-300 rounded-lg mb-3\"\r\n                  />\r\n                )}\r\n                \r\n                <div className=\"border border-gray-300 rounded-lg\">\r\n                  {isEditing ? (\r\n                    <textarea\r\n                      value={fileContent}\r\n                      onChange={(e) => setFileContent(e.target.value)}\r\n                      className=\"w-full h-96 p-3 border-0 rounded-lg resize-none focus:ring-2 focus:ring-blue-500\"\r\n                      placeholder=\"File content...\"\r\n                    />\r\n                  ) : (\r\n                    <pre className=\"p-3 h-96 overflow-auto text-sm bg-white rounded-lg\">\r\n                      {fileContent}\r\n                    </pre>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GitHubFileManager; "],"names":["constructor","this","cache","Map","cacheExpiry","rateLimitRemaining","rateLimitReset","Date","now","requestQueue","isProcessingQueue","maxCacheSize","cacheExpiryTime","defaultStructure","documents","tasks","projects","templates","uploads","getOctokit","octokit","authService","Error","handleRateLimit","waitTime","console","warn","Promise","resolve","setTimeout","updateRateLimit","headers","parseInt","getCachedData","key","expiry","get","delete","setCachedData","data","size","firstKey","keys","next","value","set","clearCache","clear","createFolderStructure","owner","repo","basePath","arguments","length","undefined","folders","Object","values","createdFolders","folder","folderPath","readmePath","rest","repos","getContent","path","error","status","readmeContent","charAt","toUpperCase","slice","createOrUpdateFileContents","message","content","Buffer","from","toString","push","success","structure","uploadFile","branch","base64Content","ArrayBuffer","Blob","arrayBuffer","sha","existingFile","ref","requestData","response","cacheKey","fileLink","generateFileLink","url","html_url","downloadUrl","download_url","accessibleLink","commit","updateFile","deleteFile","getFileContent","cachedData","fileData","type","encoding","listFiles","files","Array","isArray","map","item","name","raw","blob","download","resolveConflict","localContent","latestFile","latestContent","backupPath","toISOString","replace","resolution","updateResult","conflictInfo","latestSha","backupCreated","processBatchOperations","operations","results","operation","result","getRepositoryInfo","fullName","full_name","description","private","defaultBranch","default_branch","permissions","language","createdAt","created_at","updatedAt","updated_at","getRateLimitStatus","remaining","reset","resetIn","Math","max","getCacheStatus","maxSize","GitHubFileManager","isAuthenticated","setIsAuthenticated","useState","repositories","setRepositories","selectedRepo","setSelectedRepo","currentPath","setCurrentPath","setFiles","loading","setLoading","setError","setSuccess","selectedFile","setSelectedFile","fileContent","setFileContent","isEditing","setIsEditing","setUploadFile","uploadPath","setUploadPath","commitMessage","setCommitMessage","rateLimitInfo","setRateLimitInfo","cacheInfo","setCacheInfo","fileInputRef","useRef","useEffect","checkAuthentication","loadRepositories","updateStatusInfo","loadFiles","async","authenticated","validateToken","getRepositories","split","fileList","gitHubFileService","rateLimit","selectFile","file","formatBytes","bytes","i","floor","log","parseFloat","pow","toFixed","_jsxs","className","children","_jsx","dateString","toLocaleString","onClick","onChange","e","handleRepoSelect","repoFullName","target","id","join","disabled","LoadingSpinner","navigateUp","pathParts","filter","part","pop","stopPropagation","window","confirm","handleFileDelete","placeholder","filePath","current"],"sourceRoot":""}