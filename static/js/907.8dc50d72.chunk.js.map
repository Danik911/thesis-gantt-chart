{"version":3,"file":"static/js/907.8dc50d72.chunk.js","mappings":"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","sources":["components/PDFViewer.js","services/pdfProcessingService.js","components/PDFManager.js"],"sourcesContent":["import React from 'react';\r\n\r\n// Temporary PDFViewer replacement for deployment\r\nconst PDFViewer = ({ \r\n  file, \r\n  onMetadataExtracted, \r\n  onTextExtracted, \r\n  onError,\r\n  className = ''\r\n}) => {\r\n  return (\r\n    <div className={`pdf-viewer-placeholder ${className}`}>\r\n      <div className=\"flex items-center justify-center h-64 bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg\">\r\n        <div className=\"text-center\">\r\n          <div className=\"text-4xl text-gray-400 mb-4\">📄</div>\r\n          <p className=\"text-gray-600 font-medium\">PDF Viewer Temporarily Disabled</p>\r\n          <p className=\"text-gray-500 text-sm mt-2\">\r\n            {file ? `File: ${file.name}` : 'No file selected'}\r\n          </p>\r\n          <p className=\"text-gray-400 text-xs mt-1\">\r\n            PDF functionality will be restored after deployment fixes\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PDFViewer; ","// Temporary PDF processing service replacement for deployment\r\n// import * as pdfjsLib from 'pdfjs-dist';\r\n// import 'pdfjs-dist/build/pdf.worker.entry';\r\n\r\nclass PDFProcessingService {\r\n  constructor() {\r\n    this.cache = new Map();\r\n    this.cacheExpiry = new Map();\r\n    this.processedFiles = new Map();\r\n    this.progressCallbacks = new Map();\r\n    this.annotations = new Map();\r\n    this.readingProgress = new Map();\r\n    this.maxCacheSize = 50;\r\n    this.cacheExpiryTime = 30 * 60 * 1000; // 30 minutes\r\n    \r\n    // Temporarily disabled for deployment\r\n    // pdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/3.7.107/pdf.worker.min.js`;\r\n    \r\n    this.defaultOptions = {\r\n      thumbnailWidth: 200,\r\n      thumbnailHeight: 280,\r\n      maxTextLength: 10000,\r\n      enableAnnotations: true,\r\n      enableProgressTracking: true\r\n    };\r\n  }\r\n\r\n  // Cache management\r\n  getCachedData(key) {\r\n    const now = Date.now();\r\n    const expiry = this.cacheExpiry.get(key);\r\n    \r\n    if (expiry && now > expiry) {\r\n      this.cache.delete(key);\r\n      this.cacheExpiry.delete(key);\r\n      return null;\r\n    }\r\n    \r\n    return this.cache.get(key);\r\n  }\r\n\r\n  setCachedData(key, data) {\r\n    // Implement LRU cache eviction\r\n    if (this.cache.size >= this.maxCacheSize) {\r\n      const firstKey = this.cache.keys().next().value;\r\n      this.cache.delete(firstKey);\r\n      this.cacheExpiry.delete(firstKey);\r\n    }\r\n    \r\n    this.cache.set(key, data);\r\n    this.cacheExpiry.set(key, Date.now() + this.cacheExpiryTime);\r\n  }\r\n\r\n  // Clear cache\r\n  clearCache() {\r\n    this.cache.clear();\r\n    this.cacheExpiry.clear();\r\n    this.annotations.clear();\r\n    this.readingProgress.clear();\r\n  }\r\n\r\n  // Progress tracking\r\n  registerProgressCallback(fileId, callback) {\r\n    this.progressCallbacks.set(fileId, callback);\r\n  }\r\n\r\n  updateProgress(fileId, progress) {\r\n    const callback = this.progressCallbacks.get(fileId);\r\n    if (callback) {\r\n      callback(progress);\r\n    }\r\n  }\r\n\r\n  // Extract metadata from PDF file - temporarily disabled\r\n  async extractMetadata(file) {\r\n    console.warn('PDF metadata extraction temporarily disabled for deployment');\r\n    return {\r\n      title: file.name,\r\n      author: 'Unknown Author',\r\n      subject: '',\r\n      keywords: '',\r\n      creator: '',\r\n      producer: '',\r\n      creationDate: null,\r\n      modificationDate: null,\r\n      pages: 0,\r\n      version: '1.4',\r\n      fileSize: file.size,\r\n      lastModified: file.lastModified,\r\n      encrypted: false,\r\n      linearized: false\r\n    };\r\n  }\r\n\r\n  // Generate PDF thumbnail - temporarily disabled\r\n  async generateThumbnail(file, pageNumber = 1, options = {}) {\r\n    console.warn('PDF thumbnail generation temporarily disabled for deployment');\r\n    return null;\r\n  }\r\n\r\n  // Extract text content - temporarily disabled\r\n  async extractTextContent(file, maxPages = null, progressCallback = null) {\r\n    console.warn('PDF text extraction temporarily disabled for deployment');\r\n    return {\r\n      fullText: '',\r\n      pageTexts: [],\r\n      totalPages: 0,\r\n      extractedPages: 0\r\n    };\r\n  }\r\n\r\n  // Extract PDF outline - temporarily disabled\r\n  async extractOutline(file) {\r\n    console.warn('PDF outline extraction temporarily disabled for deployment');\r\n    return {\r\n      hasOutline: false,\r\n      outline: null\r\n    };\r\n  }\r\n\r\n  // Process PDF file comprehensively - temporarily disabled\r\n  async processPDFFile(file, options = {}) {\r\n    console.warn('PDF processing temporarily disabled for deployment');\r\n    \r\n    return {\r\n      success: false,\r\n      originalFile: file,\r\n      error: 'PDF processing temporarily disabled for deployment',\r\n      fallback: true,\r\n      fileId: `${file.name}_${Date.now()}`,\r\n      metadata: await this.extractMetadata(file),\r\n      thumbnail: null,\r\n      textContent: await this.extractTextContent(file),\r\n      outline: await this.extractOutline(file),\r\n      processed: false,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  // Annotation management - disabled\r\n  addAnnotation(fileId, annotation) {\r\n    console.warn('PDF annotations temporarily disabled for deployment');\r\n    return null;\r\n  }\r\n\r\n  getAnnotations(fileId) {\r\n    return [];\r\n  }\r\n\r\n  updateAnnotation(fileId, annotationId, updates) {\r\n    console.warn('PDF annotations temporarily disabled for deployment');\r\n    return false;\r\n  }\r\n\r\n  deleteAnnotation(fileId, annotationId) {\r\n    console.warn('PDF annotations temporarily disabled for deployment');\r\n    return false;\r\n  }\r\n\r\n  // Reading progress tracking\r\n  updateReadingProgress(fileId, progress) {\r\n    this.readingProgress.set(fileId, progress);\r\n  }\r\n\r\n  getReadingProgress(fileId) {\r\n    return { progress: this.readingProgress.get(fileId) || 0 };\r\n  }\r\n\r\n  // Create fallback result when processing fails\r\n  createFallbackResult(file, error) {\r\n    return {\r\n      success: false,\r\n      originalFile: file,\r\n      error: error.message,\r\n      fallback: true,\r\n      originalUrl: URL.createObjectURL(file),\r\n      processed: false,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  // Get processing status\r\n  getProcessingStatus(fileId) {\r\n    return {\r\n      inProgress: this.progressCallbacks.has(fileId),\r\n      cached: this.processedFiles.has(fileId)\r\n    };\r\n  }\r\n\r\n  // Cleanup resources\r\n  cleanup() {\r\n    this.clearCache();\r\n    this.progressCallbacks.clear();\r\n    this.processedFiles.clear();\r\n  }\r\n\r\n  // Validate PDF file\r\n  isValidPDFFile(file) {\r\n    const validTypes = ['application/pdf'];\r\n    return validTypes.includes(file.type.toLowerCase()) || \r\n           file.name.toLowerCase().endsWith('.pdf');\r\n  }\r\n\r\n  // Get cache statistics\r\n  getCacheStats() {\r\n    return {\r\n      size: this.cache.size,\r\n      maxSize: this.maxCacheSize,\r\n      entries: Array.from(this.cache.keys()),\r\n      expiryTime: this.cacheExpiryTime\r\n    };\r\n  }\r\n\r\n  // Search in PDF - temporarily disabled\r\n  searchInPDF(fileId, query, options = {}) {\r\n    console.warn('PDF search temporarily disabled for deployment');\r\n    return {\r\n      query: query,\r\n      results: [],\r\n      totalMatches: 0,\r\n      caseSensitive: options.caseSensitive || false,\r\n      wholeWord: options.wholeWord || false\r\n    };\r\n  }\r\n\r\n  // Extract context around search matches\r\n  extractContext(text, position, matchLength, contextSize = 50) {\r\n    const start = Math.max(0, position - contextSize);\r\n    const end = Math.min(text.length, position + matchLength + contextSize);\r\n    return text.substring(start, end);\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst pdfProcessingService = new PDFProcessingService();\r\n\r\nexport default pdfProcessingService; ","import React, { useState, useEffect } from 'react';\r\nimport PDFViewer from './PDFViewer';\r\nimport pdfProcessingService from '../services/pdfProcessingService';\r\nimport LoadingSpinner from './LoadingSpinner';\r\n\r\nconst PDFManager = ({ \r\n  uploadedFiles = [], \r\n  onFileSelect, \r\n  selectedFile = null,\r\n  className = '' \r\n}) => {\r\n  const [pdfFiles, setPdfFiles] = useState([]);\r\n  const [selectedPdfFile, setSelectedPdfFile] = useState(null);\r\n  const [processedPdfs, setProcessedPdfs] = useState(new Map());\r\n  const [loading, setLoading] = useState(false);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [showViewer, setShowViewer] = useState(false);\r\n\r\n  // Filter PDF files from uploaded files\r\n  useEffect(() => {\r\n    const pdfs = uploadedFiles.filter(file => \r\n      pdfProcessingService.isValidPDFFile(file)\r\n    );\r\n    setPdfFiles(pdfs);\r\n  }, [uploadedFiles]);\r\n\r\n  // Auto-select PDF if provided via props\r\n  useEffect(() => {\r\n    if (selectedFile && pdfProcessingService.isValidPDFFile(selectedFile)) {\r\n      setSelectedPdfFile(selectedFile);\r\n      setShowViewer(true);\r\n    }\r\n  }, [selectedFile]);\r\n\r\n  const handleFileSelect = async (file) => {\r\n    setSelectedPdfFile(file);\r\n    setShowViewer(true);\r\n    \r\n    if (onFileSelect) {\r\n      onFileSelect(file);\r\n    }\r\n\r\n    // Process PDF if not already processed\r\n    const fileKey = `${file.name}_${file.size}`;\r\n    if (!processedPdfs.has(fileKey)) {\r\n      await processPdfFile(file);\r\n    }\r\n  };\r\n\r\n  const processPdfFile = async (file) => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      const result = await pdfProcessingService.processPDFFile(file, {\r\n        thumbnailWidth: 150,\r\n        thumbnailHeight: 200,\r\n        enableAnnotations: true,\r\n        enableProgressTracking: true\r\n      });\r\n\r\n      const fileKey = `${file.name}_${file.size}`;\r\n      setProcessedPdfs(prev => new Map(prev).set(fileKey, result));\r\n      \r\n    } catch (error) {\r\n      console.error('Error processing PDF:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const searchInAllPdfs = () => {\r\n    if (!searchQuery.trim()) {\r\n      setSearchResults([]);\r\n      return;\r\n    }\r\n\r\n    const results = [];\r\n    \r\n    for (const [fileKey, processed] of processedPdfs) {\r\n      if (processed.success && processed.fileId) {\r\n        const searchResult = pdfProcessingService.searchInPDF(\r\n          processed.fileId, \r\n          searchQuery, \r\n          { caseSensitive: false, wholeWord: false }\r\n        );\r\n        \r\n        if (searchResult.results.length > 0) {\r\n          results.push({\r\n            file: pdfFiles.find(f => `${f.name}_${f.size}` === fileKey),\r\n            processed,\r\n            searchResult\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    setSearchResults(results);\r\n  };\r\n\r\n  const getProcessedData = (file) => {\r\n    const fileKey = `${file.name}_${file.size}`;\r\n    return processedPdfs.get(fileKey);\r\n  };\r\n\r\n  const formatFileSize = (bytes) => {\r\n    if (bytes === 0) return '0 Bytes';\r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  };\r\n\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return 'Unknown';\r\n    return new Date(dateString).toLocaleDateString();\r\n  };\r\n\r\n  if (showViewer && selectedPdfFile) {\r\n    return (\r\n      <div className={`pdf-manager-viewer ${className} h-full flex flex-col`}>\r\n        <div className=\"viewer-header bg-gray-100 border-b p-3 flex items-center justify-between\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <button\r\n              onClick={() => setShowViewer(false)}\r\n              className=\"px-3 py-1 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n            >\r\n              ← Back to Library\r\n            </button>\r\n            <h2 className=\"text-lg font-semibold\">{selectedPdfFile.name}</h2>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center gap-2\">\r\n            <span className=\"text-sm text-gray-600\">\r\n              {formatFileSize(selectedPdfFile.size)}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"viewer-content flex-1\">\r\n          <PDFViewer\r\n            file={selectedPdfFile}\r\n            onMetadataExtracted={(metadata) => {\r\n              console.log('Extracted metadata:', metadata);\r\n            }}\r\n            onTextExtracted={(textContent) => {\r\n              console.log('Extracted text content:', textContent);\r\n            }}\r\n            onError={(error) => {\r\n              console.error('PDF viewer error:', error);\r\n            }}\r\n            className=\"h-full\"\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`pdf-manager ${className}`}>\r\n      <div className=\"pdf-manager-header mb-6\">\r\n        <h2 className=\"text-2xl font-bold mb-4\">PDF Library</h2>\r\n        \r\n        {/* Search Bar */}\r\n        <div className=\"search-bar flex gap-2 mb-4\">\r\n          <input\r\n            type=\"text\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n            onKeyPress={(e) => e.key === 'Enter' && searchInAllPdfs()}\r\n            placeholder=\"Search across all PDFs...\"\r\n            className=\"flex-1 px-3 py-2 border rounded-lg\"\r\n          />\r\n          <button\r\n            onClick={searchInAllPdfs}\r\n            className=\"px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600\"\r\n          >\r\n            Search\r\n          </button>\r\n        </div>\r\n\r\n        {/* Search Results */}\r\n        {searchResults.length > 0 && (\r\n          <div className=\"search-results mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\r\n            <h3 className=\"font-semibold mb-2\">\r\n              Search Results ({searchResults.reduce((sum, result) => sum + result.searchResult.totalMatches, 0)} matches)\r\n            </h3>\r\n            {searchResults.map((result, index) => (\r\n              <div key={index} className=\"search-result-item mb-2 p-2 bg-white rounded border\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"font-medium\">{result.file.name}</span>\r\n                  <span className=\"text-sm text-gray-600\">\r\n                    {result.searchResult.totalMatches} matches\r\n                  </span>\r\n                </div>\r\n                <button\r\n                  onClick={() => handleFileSelect(result.file)}\r\n                  className=\"text-sm text-blue-600 hover:text-blue-800\"\r\n                >\r\n                  Open and view matches →\r\n                </button>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* PDF Grid */}\r\n      {pdfFiles.length === 0 ? (\r\n        <div className=\"empty-state text-center py-12\">\r\n          <div className=\"text-gray-400 text-6xl mb-4\">📄</div>\r\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No PDF files found</h3>\r\n          <p className=\"text-gray-600\">Upload some PDF files to get started with PDF management.</p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"pdf-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\r\n          {pdfFiles.map((file, index) => {\r\n            const processedData = getProcessedData(file);\r\n            const readingProgress = processedData?.success \r\n              ? pdfProcessingService.getReadingProgress(processedData.fileId).progress \r\n              : 0;\r\n\r\n            return (\r\n              <div\r\n                key={index}\r\n                className=\"pdf-card bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow cursor-pointer border\"\r\n                onClick={() => handleFileSelect(file)}\r\n              >\r\n                {/* Thumbnail */}\r\n                <div className=\"thumbnail-container h-48 bg-gray-100 rounded-t-lg flex items-center justify-center relative overflow-hidden\">\r\n                  {processedData?.success && processedData.thumbnail ? (\r\n                    <img\r\n                      src={processedData.thumbnail.dataUrl}\r\n                      alt={`${file.name} thumbnail`}\r\n                      className=\"max-w-full max-h-full object-contain\"\r\n                    />\r\n                  ) : (\r\n                    <div className=\"text-gray-400 text-center\">\r\n                      <div className=\"text-4xl mb-2\">📄</div>\r\n                      <div className=\"text-sm\">PDF Preview</div>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {/* Processing Indicator */}\r\n                  {loading && (\r\n                    <div className=\"absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center\">\r\n                      <LoadingSpinner />\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {/* Reading Progress */}\r\n                  {readingProgress > 0 && (\r\n                    <div className=\"absolute bottom-0 left-0 right-0 h-2 bg-gray-200\">\r\n                      <div\r\n                        className=\"h-full bg-blue-500 transition-all duration-300\"\r\n                        style={{ width: `${readingProgress}%` }}\r\n                      />\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                {/* File Info */}\r\n                <div className=\"p-4\">\r\n                  <h3 className=\"font-medium text-gray-900 truncate mb-1\" title={file.name}>\r\n                    {file.name}\r\n                  </h3>\r\n                  \r\n                  <div className=\"text-sm text-gray-600 space-y-1\">\r\n                    <div>Size: {formatFileSize(file.size)}</div>\r\n                    \r\n                    {processedData?.success && (\r\n                      <>\r\n                        <div>Pages: {processedData.metadata.pages}</div>\r\n                        <div>Author: {processedData.metadata.author}</div>\r\n                        {readingProgress > 0 && (\r\n                          <div>Progress: {readingProgress}%</div>\r\n                        )}\r\n                      </>\r\n                    )}\r\n                    \r\n                    <div>Modified: {formatDate(new Date(file.lastModified).toISOString())}</div>\r\n                  </div>\r\n\r\n                  {/* Action Buttons */}\r\n                  <div className=\"mt-3 flex gap-2\">\r\n                    <button\r\n                      onClick={(e) => {\r\n                        e.stopPropagation();\r\n                        handleFileSelect(file);\r\n                      }}\r\n                      className=\"flex-1 px-3 py-1 bg-blue-500 text-white text-sm rounded hover:bg-blue-600\"\r\n                    >\r\n                      Open\r\n                    </button>\r\n                    \r\n                    {!processedData && (\r\n                      <button\r\n                        onClick={(e) => {\r\n                          e.stopPropagation();\r\n                          processPdfFile(file);\r\n                        }}\r\n                        className=\"px-3 py-1 bg-gray-500 text-white text-sm rounded hover:bg-gray-600\"\r\n                      >\r\n                        Process\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n\r\n      {/* Cache Stats (Development) */}\r\n      {process.env.NODE_ENV === 'development' && (\r\n        <div className=\"mt-8 p-4 bg-gray-100 rounded-lg text-sm\">\r\n          <h4 className=\"font-semibold mb-2\">PDF Service Stats</h4>\r\n          <pre>{JSON.stringify(pdfProcessingService.getCacheStats(), null, 2)}</pre>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PDFManager; "],"names":["_ref","file","onMetadataExtracted","onTextExtracted","onError","className","_jsx","children","_jsxs","name","constructor","this","cache","Map","cacheExpiry","processedFiles","progressCallbacks","annotations","readingProgress","maxCacheSize","cacheExpiryTime","defaultOptions","thumbnailWidth","thumbnailHeight","maxTextLength","enableAnnotations","enableProgressTracking","getCachedData","key","now","Date","expiry","get","delete","setCachedData","data","size","firstKey","keys","next","value","set","clearCache","clear","registerProgressCallback","fileId","callback","updateProgress","progress","extractMetadata","console","warn","title","author","subject","keywords","creator","producer","creationDate","modificationDate","pages","version","fileSize","lastModified","encrypted","linearized","generateThumbnail","extractTextContent","fullText","pageTexts","totalPages","extractedPages","extractOutline","hasOutline","outline","processPDFFile","success","originalFile","error","fallback","metadata","thumbnail","textContent","processed","timestamp","toISOString","addAnnotation","annotation","getAnnotations","updateAnnotation","annotationId","updates","deleteAnnotation","updateReadingProgress","getReadingProgress","createFallbackResult","message","originalUrl","URL","createObjectURL","getProcessingStatus","inProgress","has","cached","cleanup","isValidPDFFile","includes","type","toLowerCase","endsWith","getCacheStats","maxSize","entries","Array","from","expiryTime","searchInPDF","query","options","arguments","length","undefined","results","totalMatches","caseSensitive","wholeWord","extractContext","text","position","matchLength","contextSize","start","Math","max","end","min","substring","uploadedFiles","onFileSelect","selectedFile","pdfFiles","setPdfFiles","useState","selectedPdfFile","setSelectedPdfFile","processedPdfs","setProcessedPdfs","loading","setLoading","searchQuery","setSearchQuery","searchResults","setSearchResults","showViewer","setShowViewer","useEffect","pdfs","filter","pdfProcessingService","handleFileSelect","async","fileKey","processPdfFile","result","prev","searchInAllPdfs","trim","searchResult","push","find","f","formatFileSize","bytes","i","floor","log","parseFloat","pow","toFixed","onClick","PDFViewer","onChange","e","target","onKeyPress","placeholder","reduce","sum","map","index","processedData","getProcessedData","src","dataUrl","alt","LoadingSpinner","style","width","_Fragment","dateString","toLocaleDateString","stopPropagation","process"],"sourceRoot":""}